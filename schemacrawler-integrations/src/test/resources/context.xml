<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

  <bean id="datasource"
    class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName">
      <value>org.hsqldb.jdbcDriver</value>
    </property>
    <property name="url">
      <value>jdbc:hsqldb:hsql://localhost/schemacrawler</value>
    </property>
    <property name="username">
      <value>sa</value>
    </property>
    <property name="password">
      <value></value>
    </property>
  </bean>

  <bean id="information_schema" class="java.util.HashMap">
    <constructor-arg>
      <map key-type="java.lang.String" value-type="java.lang.String">
        <entry key="select.INFORMATION_SCHEMA.ROUTINES">
          <value>
              <![CDATA[              
                  SELECT 
                    *
                  FROM 
                    INFORMATION_SCHEMA.ROUTINES 
                  ORDER BY 
                    ROUTINE_CATALOG, 
                    ROUTINE_SCHEMA, 
                    ROUTINE_NAME
                  ]]>
          </value>
        </entry>
        <entry key="select.INFORMATION_SCHEMA.VIEWS">
          <value>
              <![CDATA[
                  SELECT 
                    * 
                  FROM 
                    INFORMATION_SCHEMA.VIEWS 
                  ORDER BY 
                    TABLE_CATALOG, 
                    TABLE_SCHEMA, 
                    TABLE_NAME
                  ]]>
          </value>
        </entry>
        <entry key="select.INFORMATION_SCHEMA.TRIGGERS">
          <value>
              <![CDATA[
                  SELECT 
                    * 
                  FROM 
                    INFORMATION_SCHEMA.TRIGGERS
                  ORDER BY
                    TRIGGER_CATALOG,
                    TRIGGER_SCHEMA,
                    TRIGGER_NAME
                  ]]>
          </value>
        </entry>
        <entry key="select.INFORMATION_SCHEMA.TABLE_CONSTRAINTS">
          <value>
              <![CDATA[
                  SELECT 
                    * 
                  FROM 
                    INFORMATION_SCHEMA.TABLE_CONSTRAINTS
                  ORDER BY
                    CONSTRAINT_CATALOG,
                    CONSTRAINT_SCHEMA,
                    CONSTRAINT_NAME
                  ]]>
          </value>
        </entry>
        <entry
          key="select.INFORMATION_SCHEMA.EXT_TABLE_CONSTRAINTS">
          <value>
              <![CDATA[
                  SELECT 
                    * 
                  FROM 
                    INFORMATION_SCHEMA.CHECK_CONSTRAINTS
                  ORDER BY
                    CONSTRAINT_CATALOG,
                    CONSTRAINT_SCHEMA,
                    CONSTRAINT_NAME
                  ]]>
          </value>
        </entry>
        <entry key="select.INFORMATION_SCHEMA.SEQUENCES">
          <value>
              <![CDATA[              
                  SELECT 
                    *
                  FROM 
                    INFORMATION_SCHEMA.SEQUENCES 
                  ORDER BY 
                    SEQUENCE_CATALOG, 
                    SEQUENCE_SCHEMA, 
                    SEQUENCE_NAME
                  ]]>
          </value>
        </entry>
      </map>
    </constructor-arg>
  </bean>

  <bean id="schemaRetrievalOptionsBuilderBase"
    class="schemacrawler.schemacrawler.SchemaRetrievalOptionsBuilder" />
  <bean id="schemaRetrievalOptionsBuilder"
    factory-bean="schemaRetrievalOptionsBuilderBase"
    factory-method="withInformationSchemaViews">
    <constructor-arg ref="information_schema" />
  </bean>
  <bean id="schemaRetrievalOptions"
    factory-bean="schemaRetrievalOptionsBuilder"
    factory-method="toOptions" />

  <bean id="schemaCrawlerOptionsBuilder"
    class="schemacrawler.schemacrawler.SchemaCrawlerOptionsBuilder" />
  <bean id="schemaCrawlerOptions"
    factory-bean="schemaCrawlerOptionsBuilder"
    factory-method="toOptions" />

  <bean id="outputOptions"
    class="schemacrawler.tools.options.OutputOptionsBuilder"
    factory-method="newOutputOptions">
    <constructor-arg name="outputFormatValue"
      value="text" />
    <constructor-arg>
      <bean id="outputFile" class="java.nio.file.Paths"
        factory-method="get">
        <constructor-arg value="." />
        <constructor-arg value="scOutput.txt" />
      </bean>
    </constructor-arg>
  </bean>

  <bean id="schemaTextOptionsBuilder"
    class="schemacrawler.tools.text.schema.SchemaTextOptionsBuilder" />
  <bean
    class="org.springframework.beans.factory.config.MethodInvokingBean">
    <property name="targetObject"
      ref="schemaTextOptionsBuilder" />
    <property name="targetMethod" value="showOrdinalNumbers" />
    <property name="arguments">
      <value type="boolean">true</value>
    </property>
  </bean>
  <bean
    class="org.springframework.beans.factory.config.MethodInvokingBean">
    <property name="targetObject"
      ref="schemaTextOptionsBuilder" />
    <property name="targetMethod" value="showStandardColumnTypeNames" />
    <property name="arguments">
      <value type="boolean">true</value>
    </property>
  </bean>
  <bean
    class="org.springframework.beans.factory.config.MethodInvokingBean">
    <property name="targetObject"
      ref="schemaTextOptionsBuilder" />
    <property name="targetMethod" value="noSchemaCrawlerInfo" />
    <property name="arguments">
      <value type="boolean">true</value>
    </property>
  </bean>
  <bean id="schemaTextOptions"
    factory-bean="schemaTextOptionsBuilder" factory-method="toOptions" />

  <bean id="executableForSchema"
    class="schemacrawler.tools.executable.SchemaCrawlerExecutable">
    <constructor-arg value="schema" />
    <property name="schemaCrawlerOptions"
      ref="schemaCrawlerOptions" />
    <property name="additionalConfiguration"
      value="#{ new schemacrawler.tools.text.schema.SchemaTextOptionsBuilder(schemaTextOptions).toConfig() }" />
    <property name="outputOptions" ref="outputOptions" />
  </bean>

</beans>
